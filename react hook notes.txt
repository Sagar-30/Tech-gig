React hooks:=> only used in function component

Main Points:-
   a) React 16+ versions introduced  "React Hooks" as alternative form component life cycle hooks.
    b)Component life cycle hooks are available only for class components - (mounting, updating, unmounting) 
     c)React Hooks are not replacement for component life cycle hooks, they are just alternative
      d)React 16+ versions provides several built-in hooks and also allows to create custom hooks.
       e) React Hooks are backward compatible.(Matlab agar koi hook react 18 mei aaya hai toh use hm log react ke pichle version mein bhi use kr skte hain).

Note: Component LifeCycle Hooks are only about life cycle events.
         React Hooks are more than Life Cycle.


Pre-define React Hooks:
----------------------------------
useToggle
useFirestoreQuery
useMemoCompare
useAsync
useRequireAuth
useRouter
useAuth
useEventListener
useWhyDidYouUpdate
useDarkMode
useMedia
useLockBodyScroll
useTheme
useSpring
useHistory    “react-router-dom”
useLocation     “react-router-dom”
useParams     “react-router-dom”
useScript
useKeyPress
useMemo
useDebounce
useOnScreen
usePrevious
useOnClickOutside
useAnimation
useEffect
useState
useLocalStore
useHover  etc.

Rules for Configuring Hooks:
1. React Hooks can't be defined in Class.
2. React Hooks only for function component.
3. Hooks must be at top level.
4. You can't define hooks inside a JavaScript function.
5. Can't use hooks in conditions and iterations.


Hooks :-

   1==>                  useState
                    -------------------

- It configures a state for component.
- State can store values and make it available until the component unmount.
- You can store any value into state.

Syntax:
           const [product, setProduct] = useState();
		    setProduct();

 
   
   2==>                  useEffect
                    -------------------

   - It can manage
        a) mounting
        b) updating
        c) unmount  in function

syntax:  
           useEffect(()=>{
		   //actions on mount
		   //actions on update
		   return(()=>{
		   //actions on unmount
		   })
		   },[//dependency])


   3==>                  useContext    
                    -------------------
Remember- create,provide,use	

- what is context memory?
    it is the memory allocated for component and accesable to other component that run within the context of current component.

what is the purpose of context memory?
it enables sharing of data across components configure in multi-level hierarchy.
A higher component can share it's data to lower component.[outer to inner]
it also enables to share data across multiple request of same component.

implementing context using react hook-
----------------------------------------
context uses dependency injection machenism(DI).
DI is a technique that define how an object get holds of it's dependencies
It is about how it locates and injects the dependencies.

DI depend on 2 components - 
1. provider
2. injector

provider is responsible for locating the dependencies in memory.
   [stores and locate data]

injector is responsible to inject the data into component.

react "useContext" use both provider and injector

"useContext" acts as a service
     service follow "single ton" pattern (means ek object pehli request pr create ho jayega aur fir aage jitni baar bhi use krna hoga use hi krenge).

Note:- Every pre defined hook in react is a service that why we use use before every hook because we are using a service.


   4==>                  useCookies
                  --------------------

The `useCookies` hook is a tool in React that helps you manage cookies in your web applications. Cookies are small pieces of data that a website can store on a user's computer.
They are commonly used for tasks like remembering user preferences, tracking user sessions, and more. The `useCookies` hook simplifies the process of working with cookies in your React projects.

syntax - 
            import { useCookies } from 'react-cookie';

	    const [cookies, setCookie, removeCookie] = useCookies(['cookieName']);


- `cookies`: This is an object that represents your cookies. You can access the values of your cookies using `cookies.cookieName`, where `'cookieName'` is the name of your cookie.

   - `setCookie`: This function allows you to set a cookie. You provide it with a name, a value, and optional configuration options like expiration date and domain.

   - `removeCookie`: This function lets you remove a cookie by its name.

Ex -
    const handleLogin = () => {
    setCookie('username', 'john_doe', { path: '/', expires: new Date('2023-02-15T23:46:00') });
    setCookie('gender', 'male', { path: '/' });
    setCookie('password', 'mySecurePassword', { path: '/' });
  };
    
      removeCookie('username');



   5==>                  useReducer
                  -------------------------

- useReducer is a alternate of useState
- `useReducer` is a React hook for managing complex state logic.
- It's useful when state updates depend on previous state or involve multiple actions.
- It involves a reducer function that specifies how state changes based on actions.
- You dispatch actions to request state changes.
- React re-renders the component when state changes occur.

Syntax:-
const initialstate = { like:0 };

function reducerFunction(state, action) {
switch(action.type){
case'like':
return {like : state+1}
default:
return state;
}
}

const [state, dispatch] = useReducer(reducerFunction, initialState);

<button onClick={()=>dispatch(type:'like')}>Like</button>

- `state`: Current state value.
- `dispatch`: Function to send actions.
- `reducerFunction`: Function that handles state changes.
- `initialState`: Initial state value.



 6==>                  custom Hooks
           --------------------------------------

why we create and need a hook?

creating a custom hook means creating a new service. so we implement and inject in our application.
 Ex- 1. captcha is also a service we inject it in our website for form verification.
       2. many time in form we saw signup with google/facebook this is called open Id and this is a service.
           search for (open Id) and use.

Basic Rules for making custom hooks.

1. custom hook must be a function and must return any value.
2. Make sure that fxn handle exception.(i.e catch the problem and handle by .catch)
3. it returns exceptions.

Ex-
    1. make new file and pass a url as fxn argument and return stored state after fatching the url.
  2. import that hook in any another component.
3.Store hook in const and pass the url as argument.
4. use var name to access data we can also use map on that to access data.


----------------------------------------------------------------------------------------------------------------------------
                                            Working with API's

ques - what is distributed computing?
ans -  two application running or 2 diff machines can share information 
    -  two app running or same machine in two diff process can share information.

Q - popular distributed computing technologies?
 - CORBA
- DCOM
- RMI
- EJB
-Web services
-Remoting

3. communication Specification=>
-SOAP
-REST
-JSON

4. Api uses distributed computing architecture
   API compriises of -
         a) Service Consumers
         b) Service Provider
     API communication managed in 3 ways - 
     soap , rest , json

SOAP- (Service oriented Architecture protocol)
    consumer will make an XML request and provider will send an XML response
EX - 
Request:
<product>
<id>2</id>
</product>

Resoponse:
<product>
<id>2</id>
<Name>Tv</Name>
<price>2000</price>
</product>


2. REST (restfull services) ==> (Representational state Transfer)
 - consumer will make query request and provider will send ressponse with XML or JSON
Ex - 
     Request:
             http://fakestoreapi.com/products?id=2
Resoponse:
<product>
<id>2</id>
<Name>Tv</Name>
<price>2000</price>
</product>

JSON: (js object Notation) ==> Mostly used and recommended
- consumer makes json request and provider send json response

request:
{
"id":2
}

Response
{
"id":2,
"name":"TV",
"price":4500
}

                Design API:-
          .........................

Design End Points:- 

Provider:
  MongoBd       database
  Node.js       Server
  Express       API

consumer:
   React      UI
 - fetch()
-  $.ajax()
- axios
- whatwg-fetch

               Mongodb database  (it's json based)
          ---------------------------

1. download and install mongodb 
2. open mongoDb Compass
3. Connect with MongoDB server using
     "mongodb://127.0.0.1:27017"


oracle,MySql         MongoDB
Database             Database
Table                Collections
Records              Documents
Fields               Fields
joins                Enbedded Documents
                      (Json)

4. Create a new Database
 ex - 
    database name    :reactdb
    collection name  :tblusers

5. insert document into table[collection] => Add Data => insert document
{
  "UserId": "kaushik4229",
  "userName": "Sagar",
  "gender": "Male",
  "Age": 23,
  "number": "9299338839222"
  
}

                                 Server Side API
                               [Node.js and Express]
                    --------------------------------------------

Get       /getusers
Get       /getusers/userId
POST      /registeruser

                             React API Requests
              ---------------------------------------------------
Q- Which object Manages Ajex requessts in js basedapplications?
   XmlHttpRequests
- react can use js httpRequestmethod and promises.
 -Fetch
     disadvantage of fetch- * it return data into binary form which is convert into json.
                             * it need explicit XmlHttpRequest object to monitor the errors.
 - React can use third party library to intrect with API -
A) jQuery Ajax
b) Axios
c) Whatwg-Fetch etc..

                         jQuery Ajax with React
      ----------------------------------------------------------------

-It return data directly in Json (don't need to convert)
-Advanced error handeling method
-Handle all request like GET,POST,PUT,DELETE etc.

disadvantage- 
 - CORS issue
- Injection issues
-XSS
-Request Forgery

API Request -
 Get    http://localhost:4000/getuser
 POST   http://localhost:4000/registeruser

1. Install jquery library for react project.

     >npm install jquery --save

2. import jQuery library into component
   import $ from 'jquery';

3. Access jQuery Ajax methods
$.ajax({ajaxOptions})

 method  : request method GET /POST
 url     : API url
 success : Callback function on sucess
 error   : callback function on error

Syntax:
      $.ajax({
        method:"GET|POST",
        url:"API_URL",
        sucess:function (response){
          //Response data is JSON
	}
       error:function (response){
          // xhr.ststusCode(404,200,300), ststusText(not found,ok etc.), headers
	}
      })




















